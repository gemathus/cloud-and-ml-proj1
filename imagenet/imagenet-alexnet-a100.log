=> creating model 'alexnet'
=> Dummy data is used!
features.module.0.weight torch.Size([64, 3, 11, 11])
features.module.0.bias torch.Size([64])
features.module.3.weight torch.Size([192, 64, 5, 5])
features.module.3.bias torch.Size([192])
features.module.6.weight torch.Size([384, 192, 3, 3])
features.module.6.bias torch.Size([384])
features.module.8.weight torch.Size([256, 384, 3, 3])
features.module.8.bias torch.Size([256])
features.module.10.weight torch.Size([256, 256, 3, 3])
features.module.10.bias torch.Size([256])
classifier.1.weight torch.Size([4096, 9216])
classifier.1.bias torch.Size([4096])
classifier.4.weight torch.Size([4096, 4096])
classifier.4.bias torch.Size([4096])
classifier.6.weight torch.Size([1000, 4096])
classifier.6.bias torch.Size([1000])
VE: model AlexNet(
  (features): DataParallel(
    (module): Sequential(
      (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
      (1): ReLU(inplace=True)
      (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
      (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
      (4): ReLU(inplace=True)
      (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU(inplace=True)
      (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): ReLU(inplace=True)
      (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (11): ReLU(inplace=True)
      (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
features.module.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 55, 55])
features.module.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
features.module.2: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 27, 27])
features.module.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 27, 27]) : torch.Size([256, 192, 27, 27])
features.module.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 27, 27]) : torch.Size([256, 192, 27, 27])
features.module.5: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 192, 27, 27]) : torch.Size([256, 192, 13, 13])
features.module.6: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 384, 13, 13])
features.module.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 384, 13, 13])
features.module.8: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.9: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.10: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.11: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.12: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 6, 6])
features.module: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 256, 6, 6])
features: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 256, 6, 6])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 256, 6, 6]) : torch.Size([256, 256, 6, 6])
classifier.0: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 9216]) : torch.Size([256, 9216])
classifier.1: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 9216]) : torch.Size([256, 4096])
classifier.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.3: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.4: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.5: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.6: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 4096]) : torch.Size([256, 1000])
classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 9216]) : torch.Size([256, 1000])
: <class 'torchvision.models.alexnet.AlexNet'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Epoch: [0][   1/5005]	Time  4.816 ( 4.816)	Data  1.744 ( 1.744)	Loss 6.9077e+00 (6.9077e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.39 (  0.39)
features.module.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 55, 55])
features.module.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 55, 55])
features.module.2: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 55, 55]) : torch.Size([256, 64, 27, 27])
features.module.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 27, 27]) : torch.Size([256, 192, 27, 27])
features.module.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 192, 27, 27]) : torch.Size([256, 192, 27, 27])
features.module.5: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 192, 27, 27]) : torch.Size([256, 192, 13, 13])
features.module.6: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 192, 13, 13]) : torch.Size([256, 384, 13, 13])
features.module.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 384, 13, 13])
features.module.8: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 384, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.9: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.10: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.11: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 13, 13])
features.module.12: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 256, 13, 13]) : torch.Size([256, 256, 6, 6])
features.module: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 256, 6, 6])
features: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 256, 6, 6])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 256, 6, 6]) : torch.Size([256, 256, 6, 6])
classifier.0: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 9216]) : torch.Size([256, 9216])
classifier.1: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 9216]) : torch.Size([256, 4096])
classifier.2: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.3: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.4: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.5: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.6: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 4096]) : torch.Size([256, 1000])
classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 9216]) : torch.Size([256, 1000])
: <class 'torchvision.models.alexnet.AlexNet'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Test: [  1/196]	Time  1.247 ( 1.247)	Loss 6.9084e+00 (6.9084e+00)	Acc@1   0.00 (  0.00)	Acc@5   0.39 (  0.39)
 *   Acc@1 0.000 Acc@5 0.391
